#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('scoreapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server); 
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var Stopwatch = require('../models/stopwatch');
var lengthOfTime = 240;
var stopwatch = new Stopwatch();  
io.sockets.on('connection', function (socket) {
  socket.on('setTimer', function (data) {
    console.log(data.set);
    stopwatch.reset(data.set);
  });
  socket.on('setTitle', function (data) {
    console.log(data.set);
    io.sockets.emit('newTitle', { title: data.set });
  });
  socket.on('setDisplayTitle', function (data) {
    console.log(data.set);
    io.sockets.emit('newDisplayTitle', { title: data.set });
  });
  socket.on('loadScores', function (data) {
    io.sockets.emit('newScores');
  });

  socket.on('clearScores', function (data) {
    io.sockets.emit('flushScores');
  });
});


stopwatch.on('tick:stopwatch', function(time) {  
  io.sockets.emit('time', { time: time });
});

stopwatch.on('reset:stopwatch', function(time) {  
  io.sockets.emit('time', { time: time });
});

// stopwatch.start();

io.sockets.on('connection', function (socket) {  
  io.sockets.emit('time', { time: stopwatch.getTime() });

  socket.on('click:start', function () {
    stopwatch.start();
  });

  socket.on('click:stop', function () {
    stopwatch.stop();
  });

  socket.on('click:reset', function () {
    stopwatch.reset();
  });
}); 


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
